// FCAI – OOP Programming – 2023 - Assignment 1
// Program Name:Filters
// Last Modification Date:10/10/2023
// Toqa Abdalla Ahmed         id:20220093      email:abdallatoqa56@gmail.com
//habiba alaa eldin mahfouz   id : 20220104    email:habibaalaa775@gmail.com
//kermina nashaat shafiek     id:  20220255    email:knashaat544@gmail.com

#include <iostream>
#include <fstream>
#include <cstring>
#include <cmath>
#include "bmplib.cpp"

using namespace std;
unsigned char RGB_image[SIZE][SIZE][3];

void loadImage();
void saveImage();
void doBW();
void mergeImages();
void FlipImage();
void rotateImage();
void enlrageImage();
void shuffleImage();
void ivertImage();
void doSomethingForImage();
void Edge();
vooid shrink();
void MirrorImage();
void shuffleImage();
void blurImage();
void crop();


int main() {
    loadImage();
    cout << "Please select a filter to apply or 0 to exit" << endl;
    cout << "1- Black & White Filter" << endl;
//    cout << "2- Invert Filter" << endl;
    cout << "3-Merge Filter" << endl;
    cout << "4-Flip Image" << endl;
//    cout << "5-Rotate Image " << endl;
    cout << "6-Darken and Lighten Image" << endl;
    cout << "7-Detect Image Edges" << endl;

    cout << "8-enlrage image" << endl;
    cout << "9-shrink Image" << endl;
    cout << "10- Mirror 1/2 image" << endl;
    cout<<"12-Blur image"<<endl;

    cout << "13-Crop Image" << endl;
    int a;
    cin >> a;
    if (a == 1) {
        doBW();
    }
    else if(a==3)
        maergeImages();
    else if(a==4){
        FlipImage();
    }
    else if(a==6)
        doSomethingForImage();
    else if(a==7)
        Edge();
else if(a==8)
        enlargeImage();
    else if(a==9)
        shrink();
    else if(a==10)
        MirrorImage();
    else if(a==b)
        shuffleImage();
    
    else if(a==12)
        blurImage();
    else if(a==13){
        crop();
    }
    

    saveImage();

    return 0;
}

//_________________________________________
void loadImage() {
    char imageFileName[100];

    // Get gray scale image file name
    cout << "Enter the source image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat(imageFileName, ".bmp");
    readRGBBMP(imageFileName, RGB_image);
}

//_________________________________________
void saveImage() {
    char imageFileName[100];

    // Get gray scale image target file name
    cout << "Enter the target image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat(imageFileName, ".bmp");
    writeRGBBMP(imageFileName, RGB_image);
}

//_________________________________________1-black and white
void doBW() {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (RGB_image[i][j][0] + RGB_image[i][j][1] + RGB_image[i][j][2] / 3 > 127) {
                RGB_image[i][j][0] = 255;
                RGB_image[i][j][1] = 255;
                RGB_image[i][j][2] = 255;
            } else {
                RGB_image[i][j][0] = 0;
                RGB_image[i][j][1] = 0;
                RGB_image[i][j][2] = 0;
            }

        }
    }
}
//-------------------------------------------------------------------3-merhe Image
void loadImage2()
{
   // Get second image file name
     cout << "Enter the second image file name: ";
     cin >> imageFileName2;
    strcat(imageFileName2, ".bmp");
   readRGBBMP(imageFileName2, RGB_image2);
}


void mergeImages()
{
    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
        {
            for (int k = 0; k < 3; k++)
            {
                merged_image[i][j][k] = (RGB_image1[i][j][k] + RGB_image2[i][j][k]) / 2;
            }
        }
    }
}
//-------------------------------------------------------------------4-flip Image
void FlipImage() {
    cout << "Flip the image (h)orizontally or (v)ertically?\n";
    char ans;
    cin >> ans;
    unsigned char image2[SIZE][SIZE][3];
    if (ans == 'v') {
        for (int k = 0; k < 3; k++) {
            for (int i = 0; i < SIZE / 2; i++) {
                for (int j = 0; j < SIZE; j++) {
                    image2[i][j][k] = RGB_image[i][j][k];
                    RGB_image[i][j][k] = RGB_image[SIZE - i - 1][j][k]; // Flip vertically
                    RGB_image[SIZE - i - 1][j][k] = image2[i][j][k];
                }
            }
        }
    }
    else if(ans=='h'){
        for(int k=0;k<3;k++){
            for (int i = 0; i < SIZE; i++) {
                for (int j = 0; j < SIZE / 2; j++) {
                    image2[i][j][k] = RGB_image[i][j][k];
                    RGB_image[i][j][k] = RGB_image[i][SIZE - j - 1][k];
                    RGB_image[i][SIZE - j - 1][k] = image2[i][j][k];
                }
            }
        }

    }
}
//_______
void invert(){
    for (int i = 0; i < SIZE; ++i)
    {
        for (int j = 0; j < SIZE; ++j)
        {
            for (int k = 0; k < RGB; k++)
            {
                image[i][j][k]=255-image[i][j][k];
            }
            
        }
        
    }
    
}
//-------------------------------------------------------6-lighten abd darken
void doSomethingForImage()
{
    char choose;
    cout << "Do you want to lighten (L) or darken (D) the image? ";
    cin >> choose;

    unsigned char pixel;
    unsigned char modifiedPixel;

    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
        {
            for (int k = 0; k < 3; k++)
            {
                pixel = RGB_image[i][j][k];

                if (choose == 'L' || choose == 'l')
                {
                    // Lighten the pixel by 50%
                    modifiedPixel = pixel + (255 - pixel) / 2;
                }
                else if (choose == 'D' || choose == 'd')
                {
                    // Darken the pixel by 50%
                    modifiedPixel = pixel / 2;
                }
                else
                {
                    cout << "Invalid choice. Exiting without modification." << endl;
                    return;
                }

                RGB_image[i][j][k] = modifiedPixel;
            }
        }
    }
}
//_______
void rotate()
int choice;

    unsigned char rotated_image[SIZE][SIZE][RGB];
    cout<<"please enter the orentation that you want:";
    cin>>choice;
    switch (choice)
    {
    case 90:{
        for (int k = 0; k < RGB; ++k)
        {
        for (int i = 0; i < SIZE; ++i)
            {
                for (int j = 0; j < SIZE; ++j)
                {
                    image[j][i][k]=rotated_image[i][j][k];
                }
                
            }
        }
        break;
    }
        
    case 180:{
        for (int k=0; k<RGB; k++){
            int row = 255;
            int column = 255;
            for (int i = 0; i < SIZE; ++i)
            {
            for (int j = 0; j < SIZE; ++j)
            {
                rotated_image[row][column][k]=image[i][j][k];
                column-=1;
                if (column==0){
                    row-=1;
                }
            }
        }
        }
        break;
    }
    case 270:{
        check+=1;
        for (int k =0 ; k<RGB; k++){
            for (int i = 0; i < SIZE; ++i)
        {
        for (int j = 0; j < SIZE; ++j)
            {
                rotated_image[j][i][k]=image[i][j][k];
            }
        }
        if (check==1){
            int row = 255;
            int column = 255;
        for (int i = 0; i < SIZE; ++i)
        {
        for (int j = 0; j < SIZE; ++j)
            {
                image270[row][column][k]=rotated_image[i][j][k];
                column-=1;
                if (column==0){
                    row-=1;
                }
            }
        }
        }
        }
        break;
//-----------------------------------------------------7- detect edges
void Edge() {
    for(int k=0;k<3;k++) {
        for (int i = 1; i < SIZE - 1; i++) {
            for (int j = 1; j < SIZE - 1; j++) {
                if (abs(RGB_image[i][j][k] - RGB_image[i - 1][j][k]) > 35 && abs(RGB_image[i][j][k] - RGB_image[i + 1][j][k]) > 35) {
                    RGB_image[i][j][k] = 0;
                } else if (abs(RGB_image[i][j][k] - RGB_image[i][j - 1][k]) > 35 && abs(RGB_image[i][j][k] - RGB_image[i][j + 1][k]) > 35)
                    RGB_image[i][j][k] = 0;
                else
                    RGB_image[i][j][k] = 255;
            }
        }
    }
}
//-------------------------------------9-shrinkImage
void shrink(){
    cout<<"Shrink to (1/2), (1/3) or (1/4)?: ";
    string choice; cin>>choice;
    if (choice == "1/2") {
        for (int i = 0; i < SIZE/2; i++) {
            for (int j = 0; j < SIZE/2; j++) {
                RGB_image[i][j][0] = (RGB_image[i*2][j*2][0]);
                RGB_image[i][j][1] = (RGB_image[i*2][j*2][1]);
                RGB_image[i][j][2] = (RGB_image[i*2][j*2][2]);
            }
        }
        for(int i=SIZE/2 ; i< SIZE ; i++ ){
            for(int j=0 ; j<SIZE ;j++){
                RGB_image[i][j][0] = 255;
                RGB_image[i][j][1] = 255;
                RGB_image[i][j][2] = 255;
            }
        }
        for(int i=0 ; i< SIZE/2 ; i++ ){
            for(int j=SIZE/2 ; j<SIZE ;j++){
                RGB_image[i][j][0] = 255;
                RGB_image[i][j][1] = 255;
                RGB_image[i][j][2] = 255;
            }
        }
    }else if(choice == "1/3"){
        for (int i = 0; i < SIZE/3; i++) {
            for (int j = 0; j < SIZE/3; j++) {
                RGB_image[i][j][0] = (RGB_image[i*3][j*3][0]);
                RGB_image[i][j][1] = (RGB_image[i*3][j*3][1]);
                RGB_image[i][j][2] = (RGB_image[i*3][j*3][2]);
            }
        }
        for(int i=SIZE/3 ; i< SIZE ; i++ ){
            for(int j=0 ; j<SIZE ;j++){
                RGB_image[i][j][0] = 255;
                RGB_image[i][j][1] = 255;
                RGB_image[i][j][2] = 255;
            }
        }
        for(int i=0 ; i< SIZE/3 ; i++ ){
            for(int j=SIZE/3 ; j<SIZE ;j++){
                RGB_image[i][j][0] = 255;
                RGB_image[i][j][1] = 255;
                RGB_image[i][j][2] = 255;
            }
        }
    }else{
        for (int i = 0; i < SIZE/4; i++) {
            for (int j = 0; j < SIZE/4; j++) {
                RGB_image[i][j][0] = (RGB_image[i*4][j*4][0]);
                RGB_image[i][j][1] = (RGB_image[i*4][j*4][1]);
                RGB_image[i][j][2] = (RGB_image[i*4][j*4][2]);
            }
        }
        for(int i=SIZE/4 ; i< SIZE ; i++ ){
            for(int j=0 ; j<SIZE ;j++){
                RGB_image[i][j][0] = 255;
                RGB_image[i][j][1] = 255;
                RGB_image[i][j][2] = 255;
            }
        }
        for(int i=0 ; i< SIZE/4 ; i++ ){
            for(int j=SIZE/4 ; j<SIZE ;j++){
                RGB_image[i][j][0] = 255;
                RGB_image[i][j][1] = 255;
                RGB_image[i][j][2] = 255;
            }
        }
    }
}
//-------------------------------------------
void shuffle(){
unsigned char newimage[SIZE][SIZE][3];

    string order;
    cout<<"enter the order";
    cin>>order;
    int length = order.length();
    for (int k = 0; k < RGB; k++)
    {
        int index =0;
    while (index<4){
        if (index==0){
            if (order[index]=='1'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i][j][k]=newimage[i][j][k];
                }
            }
            
        }else if (order[index]=='2'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i][j][k]=newimage[i][j+SIZE/2][k];
                }
            }
        }else if (order[index]=='3'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i][j][k]=newimage[i+SIZE/2][j][k];
                }
                
            }
        }else if (order[index]=='4'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i][j][k]=newimage[i+SIZE/2][j+SIZE/2][k];
                }
                
            }
        }
    }
    // --------------------
        else if (index ==1){
            if (order[index]=='1'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i][j+SIZE/2][k]=newimage[i][j][k];
                }
                
            }
            
        }else if (order[index]=='2'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i][j+SIZE/2][k]=newimage[i][j+SIZE/2][k];
                }
                
            }
        }else if (order[index]=='3'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i][j+SIZE/2][k]=newimage[i+SIZE/2][j][k];
                }
                
            }
        }else if (order[index]=='4'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i][j+SIZE/2][k]=newimage[i+SIZE/2][j+SIZE/2][k];
                }
                
            }
        }
    }
    // -------------
    else if (index==2){
        if (order[index]=='1'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i+SIZE/2][j][k]=newimage[i][j][k];
                }
                
            }
            
        }else if (order[index]=='2'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i+SIZE/2][j][k]=newimage[i][j+SIZE/2][k];
                }
                
            }
        }else if (order[index]=='3'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i+SIZE/2][j][k]=newimage[i+SIZE/2][j][k];
                }
                
            }
        }else if (order[index]=='4'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i+SIZE/2][j][k]=newimage[i+SIZE/2][j+SIZE/2][k];
                }
                
            }
    }
    }// ---------
    else if (index ==3){
        if (order[index]=='1'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i+SIZE/2][j+SIZE/2][k]=newimage[i][j][k];
                }
                
            }
        }else if (order[index]=='2'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i+SIZE/2][j+SIZE/2][k]=newimage[i][j+SIZE/2][k];
                }
                
            }
        }else if (order[index]=='3'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i+SIZE/2][j+SIZE/2][k]=newimage[i+SIZE/2][j][k];
                }
                
            }
        }else if (order[index]=='4'){
            for (int i = 0; i < SIZE/2; i++){
                for (int j = 0; j < SIZE/2; j++){
                    image[i+SIZE/2][j+SIZE/2][k]=newimage[i+SIZE/2][j+SIZE/2][k];
                }
                
            }
        }
    }
    index++;
    }
    }
    
    
}
//__________________
//____10- mirror Image
void MirrorImage(){
    char x;
    cout<<"Mirror (l)eft , (r)ight ,(u)pper , (d)own side?"<<endl;
    cin>>x;
    if(x=='l'){
        for(int k=0;k<3;k++) {
            for (int i = 0; i < SIZE; i++) {
                for (int j = (SIZE / 2); j < SIZE; j++) {
                    RGB_image[i][j][k] = RGB_image[i][SIZE - j - 1][k];
                }
            }
        }
    }
    else if(x=='r'){
        for(int k=0;k<3;k++) {
            for (int i = 0; i < SIZE; i++) {
                for (int j = 0; j < SIZE / 2; j++) {
                    RGB_image[i][j][k] = RGB_image[i][SIZE - j - 1][k];
                }
            }
        }
    }
    else if(x=='u'){
        for(int k=0;k<3;k++) {
            for (int i = SIZE / 2; i < SIZE; i++) {
                for (int j = 0; j < SIZE; j++) {
                    RGB_image[i][j][k] = RGB_image[SIZE - i - 1][j][k];
                }
            }
        }
    }
    else if(x=='d'){
        for(int k=0;k<3;k++) {
            for (int i = 0; i < SIZE / 2; i++) {
                for (int j = 0; j < SIZE; j++) {
                    RGB_image[i][j][k] = RGB_image[SIZE - i - 1][j][k];
                }
            }
        }
    }
}
//-----------------------------------------------------12-blur image
void blurImage()
{
    unsigned char newImage[SIZE][SIZE][3];

    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
        {
            for (int k = 0; k < 3; k++)
            {
                // Calculate average value of surrounding pixels
                int sum = 0;
                int count = 0;

                // Increase the size of the neighborhood to achieve stronger blur
                for (int x = -2; x <= 2; x++)
                {
                    for (int y = -2; y <= 2; y++)
                    {
                        int row = i + x;
                        int col = j + y;

                        if (row >= 0 && row < SIZE && col >= 0 && col < SIZE)
                        {
                            sum += RGB_image[row][col][k];
                            count++;
                        }
                    }
                }

                newImage[i][j][k] = static_cast<unsigned char>(sum / count);
            }
        }
    }

    memcpy(RGB_image, newImage, SIZE * SIZE * 3 * sizeof(unsigned char));
//_________________________

}void enlarge(){

unsigned char newimage2[SIZE][SIZE][3];
    int quarter;
    cout<<"please enter the quarter u want to enlarge:";
    cin>>quarter;
    for (int k =0 ; k<RGB; k++){
        for (int i = 0; i < SIZE; i+=2){
        for (int j =0; j<SIZE;j+=2){
            if (quarter==1){
                image[i][j][k]=newimage2[i/2][j/2][k];
                image[i][j+1][k]=newimage2[i/2][j/2][k];
                image[i+1][j][k]=newimage2[i/2][j/2][k];
                image[i+1][j+1][k]=newimage2[i/2][j/2][k];
            }else if (quarter==2){
                image[i][j][k]=newimage2[i/2][(j+SIZE)/2][k];
                image[i][j+1][k]=newimage2[i/2][(j+SIZE)/2][k];
                image[i+1][j][k]=newimage2[i/2][(j+SIZE)/2][k];
                image[i+1][j+1][k]=newimage2[i/2][(j+SIZE)/2][k];
            }else if (quarter==3){
                image[i][j][k]=newimage2[(i+SIZE)/2][j/2][k];
                image[i][j+1][k]=newimage2[(i+SIZE)/2][j/2][k];
                image[i+1][j][k]=newimage2[(i+SIZE)/2][j/2][k];
                image[i+1][j+1][k]=newimage2[(i+SIZE)/2][j/2][k];
            }else if (quarter==4){
                image[i][j][k]=newimage2[(i+SIZE)/2][(j+SIZE)/2][k]; 
                image[i][j+1][k]=newimage2[(i+SIZE)/2][(j+SIZE)/2][k];
                image[i+1][j][k]=newimage2[(i+SIZE)/2][(j+SIZE)/2][k];
                image[i+1][j+1][k]=newimage2[(i+SIZE)/2][(j+SIZE)/2][k];
            }
        }
    }
    }
    
}
//-----------------------------------------------------13-crop Image
void crop() {
    int x, y, l, w;
    unsigned char croppedImage[SIZE][SIZE][3];
    cout << "Please enter x,y,l,w" << endl;
    cin >> x >> y >> l >> w;
    for(int k=0;k<3;k++) {
        for (int i = y; i < y + w; i++) {
            for (int j = x; j < x + l; j++) {
                croppedImage[i][j][k] = RGB_image[i][j][k];
            }
        }
    }
    for(int k=0;k<3;k++) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                RGB_image[i][j][k] = 255;
                for (int i = y; i < y + w; i++) {
                    for (int j = x; j < x + l; j++) {
                        RGB_image[i][j][k] = croppedImage[i][j][k];
                    }
                }
            }
        }
    }
}
